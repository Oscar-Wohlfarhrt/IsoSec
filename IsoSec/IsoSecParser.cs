//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from IsoSec.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class IsoSecParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		WS=10, EndLine=11, LPar=12, RPar=13, LSBra=14, RSBra=15, RetOp=16, NewOp=17, 
		IncOp=18, DecOp=19, PowerOp=20, PlusOp=21, MinusOp=22, ModOp=23, TimesOp=24, 
		DivOp=25, LBSOp=26, RBSOp=27, LEOp=28, GEOp=29, LessOp=30, GreatOp=31, 
		EqualOp=32, NEqualOp=33, AssignOp=34, LAndOp=35, LOrOp=36, LNotOp=37, 
		BAndOp=38, BXOrOp=39, BOrOp=40, BNotOp=41, DotOp=42, Comma=43, Float=44, 
		Double=45, Int=46, Bool=47, Char=48, String=49, Name=50, All=51, BlockComment=52, 
		LineComment=53;
	public const int
		RULE_program = 0, RULE_typeName = 1, RULE_funcDeclaration = 2, RULE_declararionArgs = 3, 
		RULE_line = 4, RULE_decLine = 5, RULE_stat = 6, RULE_compName = 7, RULE_declarationBase = 8, 
		RULE_declaration = 9, RULE_ctrlStruct = 10, RULE_ifElse = 11, RULE_else = 12, 
		RULE_exp = 13, RULE_compVar = 14, RULE_atom = 15, RULE_atomVar = 16, RULE_var = 17, 
		RULE_func = 18, RULE_args = 19, RULE_const = 20, RULE_newObj = 21;
	public static readonly string[] ruleNames = {
		"program", "typeName", "funcDeclaration", "declararionArgs", "line", "decLine", 
		"stat", "compName", "declarationBase", "declaration", "ctrlStruct", "ifElse", 
		"else", "exp", "compVar", "atom", "atomVar", "var", "func", "args", "const", 
		"newObj"
	};

	private static readonly string[] _LiteralNames = {
		null, "'?'", "'function'", "'end'", "'if'", "'then'", "'while'", "'do'", 
		"'for'", "'else'", null, "';'", "'('", "')'", "'['", "']'", "'return'", 
		"'create'", "'++'", "'--'", "'pow'", "'+'", "'-'", "'mod'", "'*'", "'/'", 
		"'<<'", "'>>'", "'<='", "'>='", "'<'", "'>'", "'=='", "'!='", "'='", "'&&'", 
		"'||'", "'!'", "'&'", "'^'", "'|'", "'~'", "'.'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "WS", "EndLine", 
		"LPar", "RPar", "LSBra", "RSBra", "RetOp", "NewOp", "IncOp", "DecOp", 
		"PowerOp", "PlusOp", "MinusOp", "ModOp", "TimesOp", "DivOp", "LBSOp", 
		"RBSOp", "LEOp", "GEOp", "LessOp", "GreatOp", "EqualOp", "NEqualOp", "AssignOp", 
		"LAndOp", "LOrOp", "LNotOp", "BAndOp", "BXOrOp", "BOrOp", "BNotOp", "DotOp", 
		"Comma", "Float", "Double", "Int", "Bool", "Char", "String", "Name", "All", 
		"BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "IsoSec.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static IsoSecParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public IsoSecParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public IsoSecParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclarationContext[] funcDeclaration() {
			return GetRuleContexts<FuncDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclarationContext funcDeclaration(int i) {
			return GetRuleContext<FuncDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecLineContext[] decLine() {
			return GetRuleContexts<DecLineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecLineContext decLine(int i) {
			return GetRuleContext<DecLineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Name) {
				{
				State = 46;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 44;
					funcDeclaration();
					}
					break;
				case 2:
					{
					State = 45;
					decLine();
					}
					break;
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompNameContext compName() {
			return GetRuleContext<CompNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessOp() { return GetToken(IsoSecParser.LessOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext[] typeName() {
			return GetRuleContexts<TypeNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName(int i) {
			return GetRuleContext<TypeNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreatOp() { return GetToken(IsoSecParser.GreatOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBra() { return GetToken(IsoSecParser.LSBra, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBra() { return GetToken(IsoSecParser.RSBra, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(IsoSecParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(IsoSecParser.Comma, i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			compName(0);
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LessOp) {
				{
				State = 52;
				Match(LessOp);
				State = 53;
				typeName();
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 54;
					Match(Comma);
					State = 55;
					typeName();
					}
					}
					State = 60;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 61;
				Match(GreatOp);
				}
			}

			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSBra) {
				{
				State = 65;
				Match(LSBra);
				State = 66;
				Match(RSBra);
				}
			}

			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 69;
				Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclarationContext : ParserRuleContext {
		public TypeNameContext type;
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPar() { return GetToken(IsoSecParser.LPar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPar() { return GetToken(IsoSecParser.RPar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(IsoSecParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclararionArgsContext declararionArgs() {
			return GetRuleContext<DeclararionArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public FuncDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclarationContext funcDeclaration() {
		FuncDeclarationContext _localctx = new FuncDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_funcDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			_localctx.type = typeName();
			State = 73;
			Match(T__1);
			State = 74;
			_localctx.name = Match(Name);
			State = 75;
			Match(LPar);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Name) {
				{
				State = 76;
				declararionArgs();
				}
			}

			State = 79;
			Match(RPar);
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2236544095031760L) != 0)) {
				{
				{
				State = 80;
				line();
				}
				}
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 86;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclararionArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(IsoSecParser.Comma, 0); }
		public DeclararionArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declararionArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclararionArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclararionArgsContext declararionArgs() {
		DeclararionArgsContext _localctx = new DeclararionArgsContext(Context, State);
		EnterRule(_localctx, 6, RULE_declararionArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			declaration();
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 89;
				Match(Comma);
				State = 90;
				declaration();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public StatContext lstat;
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndLine() { return GetToken(IsoSecParser.EndLine, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 8, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			_localctx.lstat = stat();
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EndLine) {
				{
				State = 94;
				Match(EndLine);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecLineContext : ParserRuleContext {
		public DeclarationContext dec;
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndLine() { return GetToken(IsoSecParser.EndLine, 0); }
		public DecLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decLine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecLineContext decLine() {
		DecLineContext _localctx = new DecLineContext(Context, State);
		EnterRule(_localctx, 10, RULE_decLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			_localctx.dec = declaration();
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EndLine) {
				{
				State = 98;
				Match(EndLine);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
	 
		public StatContext() { }
		public virtual void CopyFrom(StatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DecStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DecStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CtrlStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public CtrlStructContext ctrlStruct() {
			return GetRuleContext<CtrlStructContext>(0);
		}
		public CtrlStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCtrlStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RetOp() { return GetToken(IsoSecParser.RetOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ReturnStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpStatContext : StatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ExpStatContext(StatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 12, RULE_stat);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new ReturnStatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 101;
				Match(RetOp);
				State = 102;
				exp(0);
				}
				break;
			case 2:
				_localctx = new DecStatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 103;
				declaration();
				}
				break;
			case 3:
				_localctx = new CtrlStatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 104;
				ctrlStruct();
				}
				break;
			case 4:
				_localctx = new ExpStatContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 105;
				exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(IsoSecParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompNameContext compName() {
			return GetRuleContext<CompNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DotOp() { return GetToken(IsoSecParser.DotOp, 0); }
		public CompNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompNameContext compName() {
		return compName(0);
	}

	private CompNameContext compName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CompNameContext _localctx = new CompNameContext(Context, _parentState);
		CompNameContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_compName, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 109;
			Match(Name);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 116;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CompNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_compName);
					State = 111;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 112;
					Match(DotOp);
					State = 113;
					Match(Name);
					}
					} 
				}
				State = 118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationBaseContext : ParserRuleContext {
		public TypeNameContext type;
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(IsoSecParser.Name, 0); }
		public DeclarationBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationBaseContext declarationBase() {
		DeclarationBaseContext _localctx = new DeclarationBaseContext(Context, State);
		EnterRule(_localctx, 16, RULE_declarationBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			_localctx.type = typeName();
			State = 120;
			_localctx.name = Match(Name);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationBaseContext baseDec;
		public ExpContext value;
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationBaseContext declarationBase() {
			return GetRuleContext<DeclarationBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignOp() { return GetToken(IsoSecParser.AssignOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			_localctx.baseDec = declarationBase();
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AssignOp) {
				{
				State = 123;
				Match(AssignOp);
				State = 124;
				_localctx.value = exp(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtrlStructContext : ParserRuleContext {
		public CtrlStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctrlStruct; } }
	 
		public CtrlStructContext() { }
		public virtual void CopyFrom(CtrlStructContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoWhileContext : CtrlStructContext {
		public ExpContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public DoWhileContext(CtrlStructContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForContext : CtrlStructContext {
		public DeclarationContext dvar;
		public ExpContext ivar;
		public ExpContext cond;
		public ExpContext iexp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EndLine() { return GetTokens(IsoSecParser.EndLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndLine(int i) {
			return GetToken(IsoSecParser.EndLine, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ForContext(CtrlStructContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : CtrlStructContext {
		public ExpContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public WhileContext(CtrlStructContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfContext : CtrlStructContext {
		public ExpContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfElseContext[] ifElse() {
			return GetRuleContexts<IfElseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfElseContext ifElse(int i) {
			return GetRuleContext<IfElseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseContext @else() {
			return GetRuleContext<ElseContext>(0);
		}
		public IfContext(CtrlStructContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CtrlStructContext ctrlStruct() {
		CtrlStructContext _localctx = new CtrlStructContext(Context, State);
		EnterRule(_localctx, 20, RULE_ctrlStruct);
		int _la;
		try {
			int _alt;
			State = 185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				_localctx = new IfContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 127;
				Match(T__3);
				State = 128;
				((IfContext)_localctx).cond = exp(0);
				State = 129;
				Match(T__4);
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2236544095031760L) != 0)) {
					{
					{
					State = 130;
					line();
					}
					}
					State = 135;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 139;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 136;
						ifElse();
						}
						} 
					}
					State = 141;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8) {
					{
					State = 142;
					@else();
					}
				}

				State = 145;
				Match(T__2);
				}
				break;
			case T__5:
				_localctx = new WhileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 147;
				Match(T__5);
				State = 148;
				((WhileContext)_localctx).cond = exp(0);
				State = 149;
				Match(T__6);
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2236544095031760L) != 0)) {
					{
					{
					State = 150;
					line();
					}
					}
					State = 155;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 156;
				Match(T__2);
				}
				break;
			case T__6:
				_localctx = new DoWhileContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 158;
				Match(T__6);
				State = 162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 159;
						line();
						}
						} 
					}
					State = 164;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				}
				State = 165;
				Match(T__5);
				State = 166;
				((DoWhileContext)_localctx).cond = exp(0);
				}
				break;
			case T__7:
				_localctx = new ForContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 167;
				Match(T__7);
				State = 170;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 168;
					((ForContext)_localctx).dvar = declaration();
					}
					break;
				case 2:
					{
					State = 169;
					((ForContext)_localctx).ivar = exp(0);
					}
					break;
				}
				State = 172;
				Match(EndLine);
				State = 173;
				((ForContext)_localctx).cond = exp(0);
				State = 174;
				Match(EndLine);
				State = 175;
				((ForContext)_localctx).iexp = exp(0);
				State = 176;
				Match(T__6);
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2236544095031760L) != 0)) {
					{
					{
					State = 177;
					line();
					}
					}
					State = 182;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 183;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseContext : ParserRuleContext {
		public ExpContext cond;
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public IfElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseContext ifElse() {
		IfElseContext _localctx = new IfElseContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifElse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(T__8);
			State = 188;
			Match(T__3);
			State = 189;
			_localctx.cond = exp(0);
			State = 190;
			Match(T__4);
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2236544095031760L) != 0)) {
				{
				{
				State = 191;
				line();
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseContext @else() {
		ElseContext _localctx = new ElseContext(Context, State);
		EnterRule(_localctx, 24, RULE_else);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(T__8);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2236544095031760L) != 0)) {
				{
				{
				State = 198;
				line();
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext left;
		public TypeNameContext type;
		public ExpContext right;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPar() { return GetToken(IsoSecParser.LPar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPar() { return GetToken(IsoSecParser.RPar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IncOp() { return GetToken(IsoSecParser.IncOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DecOp() { return GetToken(IsoSecParser.DecOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LNotOp() { return GetToken(IsoSecParser.LNotOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BNotOp() { return GetToken(IsoSecParser.BNotOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusOp() { return GetToken(IsoSecParser.MinusOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompVarContext compVar() {
			return GetRuleContext<CompVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PowerOp() { return GetToken(IsoSecParser.PowerOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TimesOp() { return GetToken(IsoSecParser.TimesOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DivOp() { return GetToken(IsoSecParser.DivOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ModOp() { return GetToken(IsoSecParser.ModOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusOp() { return GetToken(IsoSecParser.PlusOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBSOp() { return GetToken(IsoSecParser.LBSOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBSOp() { return GetToken(IsoSecParser.RBSOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreatOp() { return GetToken(IsoSecParser.GreatOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessOp() { return GetToken(IsoSecParser.LessOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOp() { return GetToken(IsoSecParser.GEOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEOp() { return GetToken(IsoSecParser.LEOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EqualOp() { return GetToken(IsoSecParser.EqualOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEqualOp() { return GetToken(IsoSecParser.NEqualOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAndOp() { return GetToken(IsoSecParser.BAndOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BXOrOp() { return GetToken(IsoSecParser.BXOrOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOrOp() { return GetToken(IsoSecParser.BOrOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAndOp() { return GetToken(IsoSecParser.LAndOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOrOp() { return GetToken(IsoSecParser.LOrOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AssignOp() { return GetToken(IsoSecParser.AssignOp, 0); }
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_exp, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 205;
				Match(LPar);
				State = 206;
				_localctx.type = typeName();
				State = 207;
				Match(RPar);
				State = 208;
				_localctx.right = exp(17);
				}
				break;
			case 2:
				{
				State = 210;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2336467189760L) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 211;
				_localctx.right = exp(15);
				}
				break;
			case 3:
				{
				State = 212;
				Match(LPar);
				State = 213;
				_localctx.left = exp(0);
				State = 214;
				Match(RPar);
				}
				break;
			case 4:
				{
				State = 216;
				compVar(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 259;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 257;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 219;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 220;
						_localctx.op = Match(PowerOp);
						State = 221;
						_localctx.right = exp(15);
						}
						break;
					case 2:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 222;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 223;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 58720256L) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 224;
						_localctx.right = exp(14);
						}
						break;
					case 3:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 225;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 226;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PlusOp || _la==MinusOp) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 227;
						_localctx.right = exp(13);
						}
						break;
					case 4:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 228;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 229;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LBSOp || _la==RBSOp) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 230;
						_localctx.right = exp(12);
						}
						break;
					case 5:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 231;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 232;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4026531840L) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 233;
						_localctx.right = exp(11);
						}
						break;
					case 6:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 234;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 235;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EqualOp || _la==NEqualOp) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 236;
						_localctx.right = exp(10);
						}
						break;
					case 7:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 237;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 238;
						_localctx.op = Match(BAndOp);
						State = 239;
						_localctx.right = exp(9);
						}
						break;
					case 8:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 240;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 241;
						_localctx.op = Match(BXOrOp);
						State = 242;
						_localctx.right = exp(8);
						}
						break;
					case 9:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 243;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 244;
						_localctx.op = Match(BOrOp);
						State = 245;
						_localctx.right = exp(7);
						}
						break;
					case 10:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 246;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 247;
						_localctx.op = Match(LAndOp);
						State = 248;
						_localctx.right = exp(6);
						}
						break;
					case 11:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 249;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 250;
						_localctx.op = Match(LOrOp);
						State = 251;
						_localctx.right = exp(5);
						}
						break;
					case 12:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 252;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 253;
						_localctx.op = Match(AssignOp);
						State = 254;
						_localctx.right = exp(4);
						}
						break;
					case 13:
						{
						_localctx = new ExpContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 255;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 256;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==IncOp || _la==DecOp) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 261;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompVarContext : ParserRuleContext {
		public CompVarContext left;
		public AtomContext at;
		public AtomVarContext right;
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DotOp() { return GetToken(IsoSecParser.DotOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompVarContext compVar() {
			return GetRuleContext<CompVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomVarContext atomVar() {
			return GetRuleContext<AtomVarContext>(0);
		}
		public CompVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompVarContext compVar() {
		return compVar(0);
	}

	private CompVarContext compVar(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CompVarContext _localctx = new CompVarContext(Context, _parentState);
		CompVarContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_compVar, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 263;
			_localctx.at = atom();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 270;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CompVarContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_compVar);
					State = 265;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 266;
					Match(DotOp);
					State = 267;
					_localctx.right = atomVar();
					}
					} 
				}
				State = 272;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NewObjContext newObj() {
			return GetRuleContext<NewObjContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomVarContext atomVar() {
			return GetRuleContext<AtomVarContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstContext @const() {
			return GetRuleContext<ConstContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 30, RULE_atom);
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NewOp:
				EnterOuterAlt(_localctx, 1);
				{
				State = 273;
				newObj();
				}
				break;
			case Name:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274;
				atomVar();
				}
				break;
			case Float:
			case Double:
			case Int:
			case Bool:
			case Char:
			case String:
				EnterOuterAlt(_localctx, 3);
				{
				State = 275;
				@const();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public AtomVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomVarContext atomVar() {
		AtomVarContext _localctx = new AtomVarContext(Context, State);
		EnterRule(_localctx, 32, RULE_atomVar);
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278;
				func();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 279;
				var();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSBra() { return GetToken(IsoSecParser.LSBra, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSBra() { return GetToken(IsoSecParser.RSBra, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(IsoSecParser.Name, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 34, RULE_var);
		try {
			State = 288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 282;
				_localctx.name = Match(Name);
				State = 283;
				Match(LSBra);
				State = 284;
				args();
				State = 285;
				Match(RSBra);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 287;
				_localctx.name = Match(Name);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPar() { return GetToken(IsoSecParser.LPar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPar() { return GetToken(IsoSecParser.RPar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(IsoSecParser.Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 36, RULE_func);
		try {
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 290;
				_localctx.name = Match(Name);
				State = 291;
				Match(LPar);
				State = 292;
				Match(RPar);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				_localctx.name = Match(Name);
				State = 294;
				Match(LPar);
				State = 295;
				args();
				State = 296;
				Match(RPar);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(IsoSecParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(IsoSecParser.Comma, i);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 38, RULE_args);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			exp(0);
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 301;
				Match(Comma);
				State = 302;
				exp(0);
				}
				}
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(IsoSecParser.Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Char() { return GetToken(IsoSecParser.Char, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(IsoSecParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Float() { return GetToken(IsoSecParser.Float, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Double() { return GetToken(IsoSecParser.Double, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Int() { return GetToken(IsoSecParser.Int, 0); }
		public ConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstContext @const() {
		ConstContext _localctx = new ConstContext(Context, State);
		EnterRule(_localctx, 40, RULE_const);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1108307720798208L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewObjContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewOp() { return GetToken(IsoSecParser.NewOp, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPar() { return GetToken(IsoSecParser.LPar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPar() { return GetToken(IsoSecParser.RPar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		public NewObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newObj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsoSecVisitor<TResult> typedVisitor = visitor as IIsoSecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewObjContext newObj() {
		NewObjContext _localctx = new NewObjContext(Context, State);
		EnterRule(_localctx, 42, RULE_newObj);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			Match(NewOp);
			State = 311;
			typeName();
			State = 312;
			Match(LPar);
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2236544094965760L) != 0)) {
				{
				State = 313;
				args();
				}
			}

			State = 316;
			Match(RPar);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return compName_sempred((CompNameContext)_localctx, predIndex);
		case 13: return exp_sempred((ExpContext)_localctx, predIndex);
		case 14: return compVar_sempred((CompVarContext)_localctx, predIndex);
		}
		return true;
	}
	private bool compName_sempred(CompNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 16);
		}
		return true;
	}
	private bool compVar_sempred(CompVarContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,53,319,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,1,0,5,0,47,8,0,10,0,12,0,50,9,0,1,1,1,1,1,1,1,1,1,1,5,1,57,8,1,10,
		1,12,1,60,9,1,1,1,1,1,3,1,64,8,1,1,1,1,1,3,1,68,8,1,1,1,3,1,71,8,1,1,2,
		1,2,1,2,1,2,1,2,3,2,78,8,2,1,2,1,2,5,2,82,8,2,10,2,12,2,85,9,2,1,2,1,2,
		1,3,1,3,1,3,3,3,92,8,3,1,4,1,4,3,4,96,8,4,1,5,1,5,3,5,100,8,5,1,6,1,6,
		1,6,1,6,1,6,3,6,107,8,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,115,8,7,10,7,12,7,
		118,9,7,1,8,1,8,1,8,1,9,1,9,1,9,3,9,126,8,9,1,10,1,10,1,10,1,10,5,10,132,
		8,10,10,10,12,10,135,9,10,1,10,5,10,138,8,10,10,10,12,10,141,9,10,1,10,
		3,10,144,8,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,152,8,10,10,10,12,10,
		155,9,10,1,10,1,10,1,10,1,10,5,10,161,8,10,10,10,12,10,164,9,10,1,10,1,
		10,1,10,1,10,1,10,3,10,171,8,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,179,
		8,10,10,10,12,10,182,9,10,1,10,1,10,3,10,186,8,10,1,11,1,11,1,11,1,11,
		1,11,5,11,193,8,11,10,11,12,11,196,9,11,1,12,1,12,5,12,200,8,12,10,12,
		12,12,203,9,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,3,13,218,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,5,13,258,8,13,10,13,12,13,261,9,13,1,14,1,14,1,14,1,14,1,14,1,14,5,
		14,269,8,14,10,14,12,14,272,9,14,1,15,1,15,1,15,3,15,277,8,15,1,16,1,16,
		3,16,281,8,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,289,8,17,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,3,18,299,8,18,1,19,1,19,1,19,5,19,304,8,19,
		10,19,12,19,307,9,19,1,20,1,20,1,21,1,21,1,21,1,21,3,21,315,8,21,1,21,
		1,21,1,21,0,3,14,26,28,22,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,0,8,4,0,18,19,22,22,37,37,41,41,1,0,23,25,1,0,21,22,1,0,
		26,27,1,0,28,31,1,0,32,33,1,0,18,19,1,0,44,49,348,0,48,1,0,0,0,2,51,1,
		0,0,0,4,72,1,0,0,0,6,88,1,0,0,0,8,93,1,0,0,0,10,97,1,0,0,0,12,106,1,0,
		0,0,14,108,1,0,0,0,16,119,1,0,0,0,18,122,1,0,0,0,20,185,1,0,0,0,22,187,
		1,0,0,0,24,197,1,0,0,0,26,217,1,0,0,0,28,262,1,0,0,0,30,276,1,0,0,0,32,
		280,1,0,0,0,34,288,1,0,0,0,36,298,1,0,0,0,38,300,1,0,0,0,40,308,1,0,0,
		0,42,310,1,0,0,0,44,47,3,4,2,0,45,47,3,10,5,0,46,44,1,0,0,0,46,45,1,0,
		0,0,47,50,1,0,0,0,48,46,1,0,0,0,48,49,1,0,0,0,49,1,1,0,0,0,50,48,1,0,0,
		0,51,63,3,14,7,0,52,53,5,30,0,0,53,58,3,2,1,0,54,55,5,43,0,0,55,57,3,2,
		1,0,56,54,1,0,0,0,57,60,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,61,1,0,
		0,0,60,58,1,0,0,0,61,62,5,31,0,0,62,64,1,0,0,0,63,52,1,0,0,0,63,64,1,0,
		0,0,64,67,1,0,0,0,65,66,5,14,0,0,66,68,5,15,0,0,67,65,1,0,0,0,67,68,1,
		0,0,0,68,70,1,0,0,0,69,71,5,1,0,0,70,69,1,0,0,0,70,71,1,0,0,0,71,3,1,0,
		0,0,72,73,3,2,1,0,73,74,5,2,0,0,74,75,5,50,0,0,75,77,5,12,0,0,76,78,3,
		6,3,0,77,76,1,0,0,0,77,78,1,0,0,0,78,79,1,0,0,0,79,83,5,13,0,0,80,82,3,
		8,4,0,81,80,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,86,1,
		0,0,0,85,83,1,0,0,0,86,87,5,3,0,0,87,5,1,0,0,0,88,91,3,18,9,0,89,90,5,
		43,0,0,90,92,3,18,9,0,91,89,1,0,0,0,91,92,1,0,0,0,92,7,1,0,0,0,93,95,3,
		12,6,0,94,96,5,11,0,0,95,94,1,0,0,0,95,96,1,0,0,0,96,9,1,0,0,0,97,99,3,
		18,9,0,98,100,5,11,0,0,99,98,1,0,0,0,99,100,1,0,0,0,100,11,1,0,0,0,101,
		102,5,16,0,0,102,107,3,26,13,0,103,107,3,18,9,0,104,107,3,20,10,0,105,
		107,3,26,13,0,106,101,1,0,0,0,106,103,1,0,0,0,106,104,1,0,0,0,106,105,
		1,0,0,0,107,13,1,0,0,0,108,109,6,7,-1,0,109,110,5,50,0,0,110,116,1,0,0,
		0,111,112,10,2,0,0,112,113,5,42,0,0,113,115,5,50,0,0,114,111,1,0,0,0,115,
		118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,15,1,0,0,0,118,116,1,0,
		0,0,119,120,3,2,1,0,120,121,5,50,0,0,121,17,1,0,0,0,122,125,3,16,8,0,123,
		124,5,34,0,0,124,126,3,26,13,0,125,123,1,0,0,0,125,126,1,0,0,0,126,19,
		1,0,0,0,127,128,5,4,0,0,128,129,3,26,13,0,129,133,5,5,0,0,130,132,3,8,
		4,0,131,130,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,
		139,1,0,0,0,135,133,1,0,0,0,136,138,3,22,11,0,137,136,1,0,0,0,138,141,
		1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,
		0,142,144,3,24,12,0,143,142,1,0,0,0,143,144,1,0,0,0,144,145,1,0,0,0,145,
		146,5,3,0,0,146,186,1,0,0,0,147,148,5,6,0,0,148,149,3,26,13,0,149,153,
		5,7,0,0,150,152,3,8,4,0,151,150,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,
		0,153,154,1,0,0,0,154,156,1,0,0,0,155,153,1,0,0,0,156,157,5,3,0,0,157,
		186,1,0,0,0,158,162,5,7,0,0,159,161,3,8,4,0,160,159,1,0,0,0,161,164,1,
		0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,162,1,0,0,0,
		165,166,5,6,0,0,166,186,3,26,13,0,167,170,5,8,0,0,168,171,3,18,9,0,169,
		171,3,26,13,0,170,168,1,0,0,0,170,169,1,0,0,0,171,172,1,0,0,0,172,173,
		5,11,0,0,173,174,3,26,13,0,174,175,5,11,0,0,175,176,3,26,13,0,176,180,
		5,7,0,0,177,179,3,8,4,0,178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,
		0,180,181,1,0,0,0,181,183,1,0,0,0,182,180,1,0,0,0,183,184,5,3,0,0,184,
		186,1,0,0,0,185,127,1,0,0,0,185,147,1,0,0,0,185,158,1,0,0,0,185,167,1,
		0,0,0,186,21,1,0,0,0,187,188,5,9,0,0,188,189,5,4,0,0,189,190,3,26,13,0,
		190,194,5,5,0,0,191,193,3,8,4,0,192,191,1,0,0,0,193,196,1,0,0,0,194,192,
		1,0,0,0,194,195,1,0,0,0,195,23,1,0,0,0,196,194,1,0,0,0,197,201,5,9,0,0,
		198,200,3,8,4,0,199,198,1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,
		1,0,0,0,202,25,1,0,0,0,203,201,1,0,0,0,204,205,6,13,-1,0,205,206,5,12,
		0,0,206,207,3,2,1,0,207,208,5,13,0,0,208,209,3,26,13,17,209,218,1,0,0,
		0,210,211,7,0,0,0,211,218,3,26,13,15,212,213,5,12,0,0,213,214,3,26,13,
		0,214,215,5,13,0,0,215,218,1,0,0,0,216,218,3,28,14,0,217,204,1,0,0,0,217,
		210,1,0,0,0,217,212,1,0,0,0,217,216,1,0,0,0,218,259,1,0,0,0,219,220,10,
		14,0,0,220,221,5,20,0,0,221,258,3,26,13,15,222,223,10,13,0,0,223,224,7,
		1,0,0,224,258,3,26,13,14,225,226,10,12,0,0,226,227,7,2,0,0,227,258,3,26,
		13,13,228,229,10,11,0,0,229,230,7,3,0,0,230,258,3,26,13,12,231,232,10,
		10,0,0,232,233,7,4,0,0,233,258,3,26,13,11,234,235,10,9,0,0,235,236,7,5,
		0,0,236,258,3,26,13,10,237,238,10,8,0,0,238,239,5,38,0,0,239,258,3,26,
		13,9,240,241,10,7,0,0,241,242,5,39,0,0,242,258,3,26,13,8,243,244,10,6,
		0,0,244,245,5,40,0,0,245,258,3,26,13,7,246,247,10,5,0,0,247,248,5,35,0,
		0,248,258,3,26,13,6,249,250,10,4,0,0,250,251,5,36,0,0,251,258,3,26,13,
		5,252,253,10,3,0,0,253,254,5,34,0,0,254,258,3,26,13,4,255,256,10,16,0,
		0,256,258,7,6,0,0,257,219,1,0,0,0,257,222,1,0,0,0,257,225,1,0,0,0,257,
		228,1,0,0,0,257,231,1,0,0,0,257,234,1,0,0,0,257,237,1,0,0,0,257,240,1,
		0,0,0,257,243,1,0,0,0,257,246,1,0,0,0,257,249,1,0,0,0,257,252,1,0,0,0,
		257,255,1,0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,27,
		1,0,0,0,261,259,1,0,0,0,262,263,6,14,-1,0,263,264,3,30,15,0,264,270,1,
		0,0,0,265,266,10,2,0,0,266,267,5,42,0,0,267,269,3,32,16,0,268,265,1,0,
		0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,29,1,0,0,0,272,
		270,1,0,0,0,273,277,3,42,21,0,274,277,3,32,16,0,275,277,3,40,20,0,276,
		273,1,0,0,0,276,274,1,0,0,0,276,275,1,0,0,0,277,31,1,0,0,0,278,281,3,36,
		18,0,279,281,3,34,17,0,280,278,1,0,0,0,280,279,1,0,0,0,281,33,1,0,0,0,
		282,283,5,50,0,0,283,284,5,14,0,0,284,285,3,38,19,0,285,286,5,15,0,0,286,
		289,1,0,0,0,287,289,5,50,0,0,288,282,1,0,0,0,288,287,1,0,0,0,289,35,1,
		0,0,0,290,291,5,50,0,0,291,292,5,12,0,0,292,299,5,13,0,0,293,294,5,50,
		0,0,294,295,5,12,0,0,295,296,3,38,19,0,296,297,5,13,0,0,297,299,1,0,0,
		0,298,290,1,0,0,0,298,293,1,0,0,0,299,37,1,0,0,0,300,305,3,26,13,0,301,
		302,5,43,0,0,302,304,3,26,13,0,303,301,1,0,0,0,304,307,1,0,0,0,305,303,
		1,0,0,0,305,306,1,0,0,0,306,39,1,0,0,0,307,305,1,0,0,0,308,309,7,7,0,0,
		309,41,1,0,0,0,310,311,5,17,0,0,311,312,3,2,1,0,312,314,5,12,0,0,313,315,
		3,38,19,0,314,313,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,317,5,13,
		0,0,317,43,1,0,0,0,34,46,48,58,63,67,70,77,83,91,95,99,106,116,125,133,
		139,143,153,162,170,180,185,194,201,217,257,259,270,276,280,288,298,305,
		314
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
